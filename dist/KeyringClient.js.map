{"version":3,"file":"KeyringClient.js","sourceRoot":"","sources":["../src/KeyringClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from '@metamask/superstruct';\nimport type { Json } from '@metamask/utils';\nimport { v4 as uuid } from 'uuid';\n\nimport type {\n  Keyring,\n  KeyringAccount,\n  KeyringRequest,\n  KeyringAccountData,\n  KeyringResponse,\n  CaipAssetType,\n  Balance,\n} from './api';\nimport {\n  ApproveRequestResponseStruct,\n  CreateAccountResponseStruct,\n  DeleteAccountResponseStruct,\n  ExportAccountResponseStruct,\n  FilterAccountChainsResponseStruct,\n  GetAccountBalancesResponseStruct,\n  GetAccountResponseStruct,\n  GetRequestResponseStruct,\n  ListAccountsResponseStruct,\n  ListRequestsResponseStruct,\n  RejectRequestResponseStruct,\n  SubmitRequestResponseStruct,\n  UpdateAccountResponseStruct,\n} from './internal/api';\nimport { KeyringRpcMethod } from './internal/rpc';\nimport type { JsonRpcRequest } from './JsonRpcRequest';\nimport { strictMask } from './superstruct';\n\nexport type Sender = {\n  send(request: JsonRpcRequest): Promise<Json>;\n};\n\nexport class KeyringClient implements Keyring {\n  #sender: Sender;\n\n  /**\n   * Create a new instance of `KeyringClient`.\n   *\n   * @param sender - The `Sender` instance to use to send requests to the snap.\n   */\n  constructor(sender: Sender) {\n    this.#sender = sender;\n  }\n\n  /**\n   * Send a request to the snap and return the response.\n   *\n   * @param partial - A partial JSON-RPC request (method and params).\n   * @returns A promise that resolves to the response to the request.\n   */\n  async #send(partial: Omit<JsonRpcRequest, 'jsonrpc' | 'id'>): Promise<Json> {\n    return this.#sender.send({\n      jsonrpc: '2.0',\n      id: uuid(),\n      ...partial,\n    });\n  }\n\n  async listAccounts(): Promise<KeyringAccount[]> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.ListAccounts,\n      }),\n      ListAccountsResponseStruct,\n    );\n  }\n\n  async getAccount(id: string): Promise<KeyringAccount> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.GetAccount,\n        params: { id },\n      }),\n      GetAccountResponseStruct,\n    );\n  }\n\n  async getAccountBalances(\n    id: string,\n    assets: CaipAssetType[],\n  ): Promise<Record<CaipAssetType, Balance>> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.GetAccountBalances,\n        params: { id, assets },\n      }),\n      GetAccountBalancesResponseStruct,\n    );\n  }\n\n  async createAccount(\n    options: Record<string, Json> = {},\n  ): Promise<KeyringAccount> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.CreateAccount,\n        params: { options },\n      }),\n      CreateAccountResponseStruct,\n    );\n  }\n\n  async filterAccountChains(id: string, chains: string[]): Promise<string[]> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.FilterAccountChains,\n        params: { id, chains },\n      }),\n      FilterAccountChainsResponseStruct,\n    );\n  }\n\n  async updateAccount(account: KeyringAccount): Promise<void> {\n    assert(\n      await this.#send({\n        method: KeyringRpcMethod.UpdateAccount,\n        params: { account },\n      }),\n      UpdateAccountResponseStruct,\n    );\n  }\n\n  async deleteAccount(id: string): Promise<void> {\n    assert(\n      await this.#send({\n        method: KeyringRpcMethod.DeleteAccount,\n        params: { id },\n      }),\n      DeleteAccountResponseStruct,\n    );\n  }\n\n  async exportAccount(id: string): Promise<KeyringAccountData> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.ExportAccount,\n        params: { id },\n      }),\n      ExportAccountResponseStruct,\n    );\n  }\n\n  async listRequests(): Promise<KeyringRequest[]> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.ListRequests,\n      }),\n      ListRequestsResponseStruct,\n    );\n  }\n\n  async getRequest(id: string): Promise<KeyringRequest> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.GetRequest,\n        params: { id },\n      }),\n      GetRequestResponseStruct,\n    );\n  }\n\n  async submitRequest(request: KeyringRequest): Promise<KeyringResponse> {\n    return strictMask(\n      await this.#send({\n        method: KeyringRpcMethod.SubmitRequest,\n        params: request,\n      }),\n      SubmitRequestResponseStruct,\n    );\n  }\n\n  async approveRequest(\n    id: string,\n    data: Record<string, Json> = {},\n  ): Promise<void> {\n    assert(\n      await this.#send({\n        method: KeyringRpcMethod.ApproveRequest,\n        params: { id, data },\n      }),\n      ApproveRequestResponseStruct,\n    );\n  }\n\n  async rejectRequest(id: string): Promise<void> {\n    assert(\n      await this.#send({\n        method: KeyringRpcMethod.RejectRequest,\n        params: { id },\n      }),\n      RejectRequestResponseStruct,\n    );\n  }\n}\n"]}