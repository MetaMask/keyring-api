{"version":3,"file":"rpc-handler.js","sourceRoot":"","sources":["../src/rpc-handler.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from '@metamask/superstruct';\nimport type { Json } from '@metamask/utils';\n\nimport type { Keyring } from './api';\nimport {\n  GetAccountRequestStruct,\n  CreateAccountRequestStruct,\n  ApproveRequestRequestStruct,\n  DeleteAccountRequestStruct,\n  ExportAccountRequestStruct,\n  GetRequestRequestStruct,\n  RejectRequestRequestStruct,\n  SubmitRequestRequestStruct,\n  UpdateAccountRequestStruct,\n  FilterAccountChainsStruct,\n  ListAccountsRequestStruct,\n  ListRequestsRequestStruct,\n  GetAccountBalancesRequestStruct,\n} from './internal/api';\nimport { KeyringRpcMethod } from './internal/rpc';\nimport type { JsonRpcRequest } from './JsonRpcRequest';\nimport { JsonRpcRequestStruct } from './JsonRpcRequest';\n\n/**\n * Error thrown when a keyring JSON-RPC method is not supported.\n */\nexport class MethodNotSupportedError extends Error {\n  constructor(method: string) {\n    super(`Method not supported: ${method}`);\n  }\n}\n\n/**\n * Inner function that dispatches JSON-RPC request to the associated Keyring\n * methods.\n *\n * @param keyring - Keyring instance.\n * @param request - Keyring JSON-RPC request.\n * @returns A promise that resolves to the keyring response.\n */\nasync function dispatchRequest(\n  keyring: Keyring,\n  request: JsonRpcRequest,\n): Promise<Json | void> {\n  // We first have to make sure that the request is a valid JSON-RPC request so\n  // we can check its method name.\n  assert(request, JsonRpcRequestStruct);\n\n  switch (request.method) {\n    case KeyringRpcMethod.ListAccounts: {\n      assert(request, ListAccountsRequestStruct);\n      return keyring.listAccounts();\n    }\n\n    case KeyringRpcMethod.GetAccount: {\n      assert(request, GetAccountRequestStruct);\n      return keyring.getAccount(request.params.id);\n    }\n\n    case KeyringRpcMethod.CreateAccount: {\n      assert(request, CreateAccountRequestStruct);\n      return keyring.createAccount(request.params.options);\n    }\n\n    case KeyringRpcMethod.GetAccountBalances: {\n      if (keyring.getAccountBalances === undefined) {\n        throw new MethodNotSupportedError(request.method);\n      }\n      assert(request, GetAccountBalancesRequestStruct);\n      return keyring.getAccountBalances(\n        request.params.id,\n        request.params.assets,\n      );\n    }\n\n    case KeyringRpcMethod.FilterAccountChains: {\n      assert(request, FilterAccountChainsStruct);\n      return keyring.filterAccountChains(\n        request.params.id,\n        request.params.chains,\n      );\n    }\n\n    case KeyringRpcMethod.UpdateAccount: {\n      assert(request, UpdateAccountRequestStruct);\n      return keyring.updateAccount(request.params.account);\n    }\n\n    case KeyringRpcMethod.DeleteAccount: {\n      assert(request, DeleteAccountRequestStruct);\n      return keyring.deleteAccount(request.params.id);\n    }\n\n    case KeyringRpcMethod.ExportAccount: {\n      if (keyring.exportAccount === undefined) {\n        throw new MethodNotSupportedError(request.method);\n      }\n      assert(request, ExportAccountRequestStruct);\n      return keyring.exportAccount(request.params.id);\n    }\n\n    case KeyringRpcMethod.ListRequests: {\n      if (keyring.listRequests === undefined) {\n        throw new MethodNotSupportedError(request.method);\n      }\n      assert(request, ListRequestsRequestStruct);\n      return keyring.listRequests();\n    }\n\n    case KeyringRpcMethod.GetRequest: {\n      if (keyring.getRequest === undefined) {\n        throw new MethodNotSupportedError(request.method);\n      }\n      assert(request, GetRequestRequestStruct);\n      return keyring.getRequest(request.params.id);\n    }\n\n    case KeyringRpcMethod.SubmitRequest: {\n      assert(request, SubmitRequestRequestStruct);\n      return keyring.submitRequest(request.params);\n    }\n\n    case KeyringRpcMethod.ApproveRequest: {\n      if (keyring.approveRequest === undefined) {\n        throw new MethodNotSupportedError(request.method);\n      }\n      assert(request, ApproveRequestRequestStruct);\n      return keyring.approveRequest(request.params.id, request.params.data);\n    }\n\n    case KeyringRpcMethod.RejectRequest: {\n      if (keyring.rejectRequest === undefined) {\n        throw new MethodNotSupportedError(request.method);\n      }\n      assert(request, RejectRequestRequestStruct);\n      return keyring.rejectRequest(request.params.id);\n    }\n\n    default: {\n      throw new MethodNotSupportedError(request.method);\n    }\n  }\n}\n\n/**\n * Handles a keyring JSON-RPC request.\n *\n * This function is meant to be used as a handler for Keyring JSON-RPC requests\n * in an Accounts Snap.\n *\n * @param keyring - Keyring instance.\n * @param request - Keyring JSON-RPC request.\n * @returns A promise that resolves to the keyring response.\n * @example\n * ```ts\n * export const onKeyringRequest: OnKeyringRequestHandler = async ({\n *   origin,\n *   request,\n * }) => {\n *   return await handleKeyringRequest(keyring, request);\n * };\n * ```\n */\nexport async function handleKeyringRequest(\n  keyring: Keyring,\n  request: JsonRpcRequest,\n): Promise<Json | void> {\n  try {\n    return await dispatchRequest(keyring, request);\n  } catch (error) {\n    const message =\n      error instanceof Error && typeof error.message === 'string'\n        ? error.message\n        : 'An unknown error occurred while handling the keyring request';\n\n    throw new Error(message);\n  }\n}\n"]}