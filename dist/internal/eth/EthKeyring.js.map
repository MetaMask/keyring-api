{"version":3,"file":"EthKeyring.js","sourceRoot":"","sources":["../../../src/internal/eth/EthKeyring.ts"],"names":[],"mappings":"","sourcesContent":["import type { Json, Keyring } from '@metamask/utils';\n\nimport type { KeyringExecutionContext } from '../../contexts';\nimport type {\n  EthBaseTransaction,\n  EthBaseUserOperation,\n  EthUserOperation,\n  EthUserOperationPatch,\n} from '../../eth';\n\nexport type EthKeyring<State extends Json> = Keyring<State> & {\n  /**\n   * Convert a base transaction to a base UserOperation.\n   *\n   * @param address - Address of the sender.\n   * @param transactions - Base transactions to include in the UserOperation.\n   * @param context - Keyring execution context.\n   * @returns A pseudo-UserOperation that can be used to construct a real.\n   */\n  prepareUserOperation?(\n    address: string,\n    transactions: EthBaseTransaction[],\n    context: KeyringExecutionContext,\n  ): Promise<EthBaseUserOperation>;\n\n  /**\n   * Patches properties of a UserOperation. Currently, only the\n   * `paymasterAndData` can be patched.\n   *\n   * @param address - Address of the sender.\n   * @param userOp - UserOperation to patch.\n   * @param context - Keyring execution context.\n   * @returns A patch to apply to the UserOperation.\n   */\n  patchUserOperation?(\n    address: string,\n    userOp: EthUserOperation,\n    context: KeyringExecutionContext,\n  ): Promise<EthUserOperationPatch>;\n\n  /**\n   * Signs an UserOperation.\n   *\n   * @param address - Address of the sender.\n   * @param userOp - UserOperation to sign.\n   * @param context - Keyring execution context.\n   * @returns The signature of the UserOperation.\n   */\n  signUserOperation?(\n    address: string,\n    userOp: EthUserOperation,\n    context: KeyringExecutionContext,\n  ): Promise<string>;\n};\n"]}